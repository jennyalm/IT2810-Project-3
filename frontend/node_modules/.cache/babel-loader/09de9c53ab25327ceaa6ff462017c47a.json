{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\jakob\\\\Prosjekter\\\\Web-3\\\\project-3\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jakob\\\\Prosjekter\\\\Web-3\\\\project-3\\\\frontend\\\\src\\\\components\\\\MovieIterator\\\\MovieIterator.js\";\nimport React, { useState } from 'react';\nimport Movie from '../Movie/Movie';\nimport './MovieIterator.css';\nimport PopUp from \"../PopUp/PopUp.js\";\n\nfunction MovieIterator(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        showPopup = _useState2[0],\n        setShowPopup = _useState2[1];\n\n  const displayMovies = [].concat(props.movies).sort((a, b) => parseInt(b.Year) - parseInt(a.Year)).map((movie, index) => React.createElement(Movie, {\n    onClick: () => setShowPopup(true),\n    key: \"\".concat(index, \"-\").concat(movie.Title),\n    movie: movie,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }));\n  return React.createElement(\"div\", {\n    className: \"movies\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, displayMovies, showPopup ? React.createElement(PopUp, {\n    text: \"Click \\\"Close Button\\\" to hide popup\",\n    closePopup: () => setShowPopup(!showPopup),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }) : null);\n}\n\nexport default MovieIterator;\n/* const displayMovies = [].concat(props.movies)\r\n        .sort((a,b) => a.Year > b.Year)\r\n        .map((movies.js, index) => (\r\n            <Movie key={`${index}-${movies.js.Title}`} movies.js={movies.js} />\r\n        )\r\n    ) */","map":{"version":3,"sources":["C:\\Users\\jakob\\Prosjekter\\Web-3\\project-3\\frontend\\src\\components\\MovieIterator\\MovieIterator.js"],"names":["React","useState","Movie","PopUp","MovieIterator","props","showPopup","setShowPopup","displayMovies","concat","movies","sort","a","b","parseInt","Year","map","movie","index","Title"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,qBAAP;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;AAIA,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AAAA,oBAGSJ,QAAQ,CAAC,KAAD,CAHjB;AAAA;AAAA,QAGlBK,SAHkB;AAAA,QAGPC,YAHO;;AAKzB,QAAMC,aAAa,GAAG,GAAGC,MAAH,CAAUJ,KAAK,CAACK,MAAhB,EACjBC,IADiB,CACZ,CAACC,CAAD,EAAGC,CAAH,KAASC,QAAQ,CAACD,CAAC,CAACE,IAAH,CAAR,GAAmBD,QAAQ,CAACF,CAAC,CAACG,IAAH,CADxB,EAEjBC,GAFiB,CAEb,CAACC,KAAD,EAAQC,KAAR,KACG,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAE,MAAMX,YAAY,CAAC,IAAD,CAAlC;AAA0C,IAAA,GAAG,YAAKW,KAAL,cAAcD,KAAK,CAACE,KAApB,CAA7C;AAA0E,IAAA,KAAK,EAAEF,KAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHU,CAAtB;AAWA,SACI;AAAK,IAAA,SAAS,EAAE,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,aADL,EAGKF,SAAS,GACN,oBAAC,KAAD;AACI,IAAA,IAAI,EAAC,sCADT;AAEI,IAAA,UAAU,EAAE,MAAMC,YAAY,CAAC,CAACD,SAAF,CAFlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAKJ,IARV,CADJ;AAcH;;AAED,eAAeF,aAAf;AAGA","sourcesContent":["import React, { useState } from 'react'\r\nimport Movie from '../Movie/Movie'\r\nimport './MovieIterator.css';\r\nimport PopUp from \"../PopUp/PopUp.js\";\r\n\r\n\r\n\r\nfunction MovieIterator(props){\r\n\r\n\r\n    const [showPopup, setShowPopup] = useState(false);\r\n\r\n    const displayMovies = [].concat(props.movies)\r\n        .sort((a,b) => parseInt(b.Year) - parseInt(a.Year))\r\n        .map((movie, index) => (\r\n                <Movie onClick={() => setShowPopup(true)} key={`${index}-${movie.Title}`} movie={movie} />\r\n            )\r\n        )\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className={\"movies\"}>\r\n            {displayMovies}\r\n\r\n            {showPopup ?\r\n                <PopUp\r\n                    text='Click \"Close Button\" to hide popup'\r\n                    closePopup={() => setShowPopup(!showPopup)}\r\n                />\r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MovieIterator\r\n\r\n\r\n/* const displayMovies = [].concat(props.movies)\r\n        .sort((a,b) => a.Year > b.Year)\r\n        .map((movies.js, index) => (\r\n            <Movie key={`${index}-${movies.js.Title}`} movies.js={movies.js} />\r\n        )\r\n    ) */"]},"metadata":{},"sourceType":"module"}